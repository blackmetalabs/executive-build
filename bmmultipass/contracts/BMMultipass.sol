/*
* Generated by Black Meta Corporation & @daveaneo
* Advisory by @Thrasher66099
* 
*/


pragma solidity ^0.8.0;

interface IByteContract {
    function burn(address _from, uint256 _amount) external;
}

import "interfaces/IERC20.sol";
import "contracts/helpers/Base64.sol";
//import "contracts/helpers/console.sol";


/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }


    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation. 
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}

contract BMMultipass is ERC721Enumerable, ReentrancyGuard, Ownable {

    // todo -- make compatible if owner address has multiple citizen IDs
    // todo -- create function, setDefaultCitizenId, to allow owner to save preferences
    // todo -- for now, there is no need. as no change in functionality.

//    address public multipass; // todo -- what is this? Contract from Neo tokyo
    address public citizenContractAddress;
    address public bytesContractAddress;
    IERC20 BytesERC20; // todo -- verify that this is IERC20 and not something similar
    IERC721Enumerable NeoTokyoContract;
    IERC721Enumerable BlackMetaIdentityContract;

    uint256 private whiteListCount;
    uint256 private OGPrivilege = 1;
    uint256 public tokenCounter;
    uint256 private primaryClaimsCompleted;
    uint256 private secondaryClaimsCompleted;
    uint256 private requiredBytesToMint;
    uint256 private mintFee;
    uint256 private personnelMintsRemaining = 500;
    uint256 private blackMetaMintsRemaining = 2500;

    string private backgroundImageLink;

    mapping(uint256 => uint256) private tokenIdToPackedData; // compressed data for NFT
    mapping(uint256 => uint256) private tokenIdToNeoCitizenClaimedStatus; // compressed data for NFT
    mapping(uint256 => uint256) private tokenIdToBlackMetaIdentityClaimedStatus; // compressed data for NFT
    mapping(address => uint256) private whiteList;

    struct Data {
        uint256 clearanceLevel;  // 0 <= x <= 12
        uint256 station;
        uint256 securityTerminal; //  1 <= x <= 6
        uint256 xenGroup;             // 1,2,3
        uint256 command;
        uint256 response;
        uint256 rarity;
    }

    // used for limiting what traits are minted
    uint256[] tierOneClearanceLevelsRemaining = [2, 4, 16, 20, 18, 21, 24, 27, 30, 36, 60, 102, 240];
    uint256[] tierOneClearanceLevelTotals = [2, 4, 16, 20, 18, 21, 24, 27, 30, 36, 60, 102, 240]; // probably not needed
    uint256[] tierTwoClearanceLevelsRemaining = [28, 36, 44, 60, 72, 84, 96, 108, 120, 144, 240, 408, 960];
    uint256[] tierTwoClearanceLevelTotals = [28, 36, 44, 60, 72, 84, 96, 108, 120, 144, 240, 408, 960]; // probably not needed

    // used for limiting what traits are minted
    uint256[] stationsRemaining = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];
    uint256[] securityTerminalsRemaining = [100, 200, 400, 500, 700, 1100];
    uint256[] xenGroupsRemaining = [300, 900, 1800];
    uint256[] commandsRemaining = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];
    uint256[] responsesRemaining = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];

    // Used for rarity scores
    uint256[] stationTotals = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];
    uint256[] securityTerminalTotals = [100, 200, 400, 500, 700, 1100];
    uint256[] xenGroupTotals = [300, 900, 1800];
    uint256[] commandTotals = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];
    uint256[] responseTotals = [30, 40, 60, 80, 90, 105, 120, 135, 150, 180, 300, 510, 1200];

    enum ClearanceLevel {GMan, Board, Director, Operative, LevelNine, LevelEight, LevelSeven, LevelSix, LevelFive,
        LevelFour, LevelThree, LevelTwo, LevelOne}

    enum DataProperties {clearanceLevel, station, securityTerminal, xenGroup, command, response, rarity}

    string[] private clearanceLevels = [
        "G-man",
        "Board",
        "Executive",
        "Black Ops",
        "Level 9",
        "Level 8",
        "Level 7",
        "Level 6",
        "Level 5",
        "Level 4",
        "Level 3",
        "Level 2",
        "Level 1"
    ];

    string[] private stations = [
        "Specimen 6",
        "Polymorph Chamber",
        "Antimatter Reactor",
        "Lambda Complex",
        "Super Soldier Barracks",
        "Chimera Hive",
        "Cloning Lab",
        "Robotics Factory",
        "The Oracle",
        "The Bridge",
        "Terraforming Bay",
        "Armory",
        ""
    ];

    string[] private securityTerminals = [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
    ];

    string[] private xenGroups = [
        "Xen 1",
        "Xen 2",
        "Xen 3"
    ];

    string[] private commands = [
        "Unlock",
        "Build",
        "Set",
        "Trace",
        "Import",
        "Execute",
        "Show",
        "Lookup",
        "Export",
        "Config",
        "Reset",
        "Shutdown",
        ""
    ];

    string[] private responses = [
        "Access Granted",
        "Success",
        "Found",
        "Switching Protocols",
        "Locked",
        "Processing",
        "Redirect",
        "",
        "Unauthorised", // red???
        "Conflict",
        "Command 3",
        "Error",
        "Access Denied"
    ];


    event MultipassCreated(
        uint256 _id,
        address recipient,
        uint256 data,
        uint256 date
    );


    event ReleaseInformation(
        uint256 InformationA,
        uint256 InformationB,
        uint256 InformationC
    );

    event FundsReleasedToAccount(
        uint256 EthAmount,
        uint256 BytesAmount,
        address account,
        uint256 date
    );

    event ReceivedETH(
        address sender,
        uint256 amount,
        uint256 date
    );


    //////////////////////////////////
    ////// Bit Packing Functions /////
    //////////////////////////////////

    /** @dev Packs 6 uints from data structure into 1 uint to save space (96, 96, 32, 8, 8, 8) -> 256
        @param _myData -- data structure holding attributes of NFT
    */
    function packDataStructure(Data memory _myData) internal pure returns (uint256){
        return packData(_myData.clearanceLevel, _myData.station, _myData.securityTerminal, _myData.xenGroup, _myData.command, _myData.response, _myData.rarity);
    }

    /** @dev Packs 5 uints into 1 uint to save space () -> 256
        @param _clearanceLevel -- clearance level of NFT
      */
    function packData(uint256 _clearanceLevel, uint256 _station, uint256 _securityTerminal, uint256 _xenGroup, uint256 _command, uint256 _response, uint256 _rarity) internal pure returns (uint256){

        uint256 count = 0;
        uint256 ret = _clearanceLevel;
        count += 8;

        ret |= _station << count;
        count += 8;

        ret |= _securityTerminal << count;
        count += 8;

        ret |= _xenGroup << count;
        count += 8;

        ret |= _command << count;
        count += 8;

        ret |= _response << count;
        count += 8;

        ret |= _rarity << count;
        count += 128; // have not calculated needed size

        return ret;
    }

    /** @dev Unpacks 1 uints into 3 uints; (256) -> (90, 90, 32, 8, 3, 1)
        @param _id -- NFT id, which will pull the 256 bit encoding of _dipValue, _stableCoinAmount, _energy, _dipPercent, _dipLevel, and _isWaitingToBuy
      */
    function unpackData(uint256 _id) internal view returns (Data memory){
        return _unpackData(tokenIdToPackedData[_id]);
    }

    /** @dev Unpacks 1 uints into 3 uints; (256) -> (90, 90, 32, 8, 3, 1)
        @param _myData -- 256 bit encoding of _dipValue, _stableCoinAmount, _energy, _dipPercent, _dipLevel, and _isWaitingToBuy
      */
    function _unpackData(uint256 _myData) internal pure returns (Data memory){

//        return Data(1,2,3,4,5, 6, 7);
        uint256 _clearanceLevel = uint256(uint8(_myData));
        uint256 _station = uint256(uint8(_myData >> 8));
        uint256 _securityTerminal = uint256(uint8(_myData >> 16));
        uint256 _xenGroup = uint256(uint8(_myData >> 24));
        uint256 _command = uint256(uint8(_myData >> 32));
        uint256 _response = uint256(uint8(_myData >> 40));
        uint256 _rarity = uint256(uint128(_myData >> 48));


        return Data(_clearanceLevel, _station, _securityTerminal, _xenGroup, _command, _response, _rarity);
    }

    // todo --remove before launch
    function verifyPacking() public view returns(bool){
        uint256 compressed = packData(1,2,3,4,5,6,12345);
        Data memory _myData = _unpackData(compressed);

//        emit ReleaseInformation(_myData.rarity, _myData.rarity, _myData.rarity);

        if(
            _myData.clearanceLevel == 1 &&
            _myData.station == 2 &&
            _myData.securityTerminal == 3 &&
            _myData.xenGroup == 4 &&
            _myData.command == 5 &&
            _myData.response == 6 &&
            _myData.rarity == 12345
        ) { return true;}
        else {return false;}
    }


    //////////////////////////////////
    ///////// Get Functions //////////
    //////////////////////////////////

    // todo, replace with simpler enum functions -- or not?
    function getClearanceLevel(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId));
        return clearanceLevels[unpackData(_tokenId).clearanceLevel];
        }

    function getStation(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId));
        return stations[unpackData(_tokenId).clearanceLevel];
    }

    function getUserGroup(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId));
        return xenGroups[unpackData(_tokenId).xenGroup];
    }

    function getCommand(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId));
        return commands[unpackData(_tokenId).command];
    }

    function getResponse(uint256 _tokenId) external view returns (string memory) {
        require(_exists(_tokenId));
        return responses[unpackData(_tokenId).response];
    }

    function getRarity(uint256 _tokenId) external view returns (uint256) { // number not string
        require(_exists(_tokenId));
        return unpackData(_tokenId).rarity;
    }

    function getRanking(uint256 _tokenId) public view returns (uint256) {
        require(_exists(_tokenId));
        uint256 rank = 1;
        Data memory _myData;
        uint256 _myRarity = unpackData(_tokenId).rarity;
        for(uint256 i=0; i< tokenCounter; i++){
            if(i!= _tokenId){
                _myData = unpackData(i);
                if(_myData.rarity > _myRarity){
                    rank +=1;
                }
            }
        }
        return rank;
    }


    //////////////////////////////////
    ///////// Set Functions /////////
    //////////////////////////////////

    // todo -- this has been ignored because no real use, atm
//    function setDefaultCitizenId(uint256 _citizenId) public {
//        // require ownership of this NFT
//        // require ownership of _citizenId
//        // set defaultCitizenId property
//    }


    //////////////////////////////////
    ///////// Core Functions /////////
    //////////////////////////////////

    // does not take into account OG status (no level1)
    function getAvailableClearanceLevelsGivenBytes(uint256 _Bytes) view external returns(string[] memory) {
        uint256[] memory availableClearanceLevels = _getAvailableClearanceLevelsGivenBytes(_Bytes);
        string[] memory availableClearanceLevelNames = new string[](availableClearanceLevels.length);

        for(uint256 i; i< availableClearanceLevels.length; i++){
            availableClearanceLevelNames[i] = clearanceLevels[availableClearanceLevels[i]];
        }

        return availableClearanceLevelNames;
    }

    function _getAvailableClearanceLevelsGivenBytes(uint256 _Bytes) internal view returns(uint256[] memory) {
        uint256[] memory availableClearanceLevels;

        uint256 minLevel;
        uint256 _count = 0;
        uint256 _counter = 0;

        if (_Bytes >= 500) {
            minLevel = 0;
        }
        else if(_Bytes >= 300){
            minLevel = 1;
        }
        else if(_Bytes >= 200){
            minLevel = 3;
        }
        else if(_Bytes >= 100){
            minLevel = 6;
        }
        else if(_Bytes >= 50){
            minLevel = 9;
        }
        else {
            if(OGPrivilege == 1 && whiteList[msg.sender] < 251){ //
                minLevel == 11;
            }
            else {
                minLevel = 12;
            }
        }

        for(uint256 i=0; i <= minLevel; i++){
            if(_Bytes==requiredBytesToMint ? (tierOneClearanceLevelsRemaining[i] > 0) : (tierTwoClearanceLevelsRemaining[i] > 0) ){
                _count+=1;
            }
        }

        availableClearanceLevels = new uint256[](_count);
        for(uint256 i=0; i <= minLevel; i++){
            if(_Bytes==requiredBytesToMint ? (tierOneClearanceLevelsRemaining[i] > 0) : (tierTwoClearanceLevelsRemaining[i] > 0) ){
                availableClearanceLevels[_counter] = i;
                _counter += 1;
            }
        }

        return availableClearanceLevels;
    }


    // these numbers need to be in order of value.
    function _chooseTraitGivenArray(uint256[] memory _availableItems) internal view returns(uint256) {
        uint256 total = 0; // todo -- loop  through and get total
        uint256 summed = 0;

        for(uint256 i=0;i < _availableItems.length; i++){
            total += _availableItems[i];
        }
        require(total!=0, "Minting exhausted.");

        bytes memory hashString = (abi.encodePacked(block.difficulty, block.timestamp, msg.sender, tokenCounter, _availableItems[0], _availableItems.length ));
        uint256 pseudoRand = uint256(keccak256(hashString)) % total;

        for(uint256 i=0;i< _availableItems.length; i++){
            summed += _availableItems[i];
            if(pseudoRand < summed){
                return i;
            }
        }
    }

    // temp
    function claimForPersonnel(uint256 _BytesReceived, uint256 _BlackMetaIdentity) public payable nonReentrant {
        uint256 doesOwnToken = 0;
        require(personnelMintsRemaining > 0, "Personell limit reached.");
        personnelMintsRemaining -= 1;

        for(uint256 i=0; i< BlackMetaIdentityContract.balanceOf(msg.sender);i++){
            if(BlackMetaIdentityContract.tokenOfOwnerByIndex(msg.sender, i) == _BlackMetaIdentity){
                doesOwnToken = 1;
                break;
            }
        }
        require(doesOwnToken==1, "Not Owner of this token.");
        require(tokenIdToBlackMetaIdentityClaimedStatus[_BlackMetaIdentity]==0, "Citizen already Claimed");
        tokenIdToBlackMetaIdentityClaimedStatus[_BlackMetaIdentity] = 1;

        _claim(_BytesReceived);
    }

    function _claim(uint256 _BytesReceived) internal { // removed payable
        require (msg.value >= mintFee); // todo -- confirm mint fee
        require(BytesERC20.balanceOf(msg.sender) >= _BytesReceived && _BytesReceived >= requiredBytesToMint, "Insufficient Byte balance");
        require(whiteList[msg.sender]!=0, "Not whitelisted"); // todo give privileges to first 250, not lowest level

        if(requiredBytesToMint > 0){
            require(BytesERC20.transferFrom(msg.sender, address(this), _BytesReceived), "Failed to transfer Bytes");
        }

        // returns list-- could be enums -- of positions within clearanceLevels that are available, not amount available
        uint256[] memory availableClearanceLevels = _getAvailableClearanceLevelsGivenBytes(_BytesReceived); // references
        require(availableClearanceLevels.length > 0, "Minting unavailable for that amount. Try less Bytes.");

        uint256[] memory _availTotals = new uint256[](13);
        for(uint256 i=0;i < availableClearanceLevels.length;i++){
//            if(i==12 && OGPrivilege == 1 && whiteList[msg.sender] < 251) { continue; } moved to getAvailableClearanceLevelsGivenBytes

            _availTotals[i] = _BytesReceived==25 ? tierOneClearanceLevelTotals[availableClearanceLevels[i]] :
                tierTwoClearanceLevelTotals[availableClearanceLevels[i]];
        }

        Data memory _myData = Data( {
            clearanceLevel:0,
            station:0,
            securityTerminal:0,
            xenGroup:0,
            command:0,
            response:0,
            rarity:0
        });

        uint256 trait;
        for(uint256 i=0;i < 6;i++){ // 7 traits. rarity and clearanceLevel calculated elsewhere
            // todo -- decrease trait
            if(i==0){ // clearanceLevel
                _myData.clearanceLevel = _chooseTraitGivenArray(_availTotals); // todo
                if(_BytesReceived==requiredBytesToMint){
                    tierOneClearanceLevelTotals[_myData.clearanceLevel] -= 1;
                }
                else{
                    tierTwoClearanceLevelTotals[_myData.clearanceLevel] -= 1;
                }
            }
            if(i==1){
                _myData.station = _chooseTraitGivenArray(stationsRemaining);
                stationsRemaining[_myData.station] -= 1;
            }
            else if(i==2){
                _myData.securityTerminal = _chooseTraitGivenArray(securityTerminalsRemaining);
                securityTerminalsRemaining[_myData.securityTerminal] -= 1;
            }
            else if(i==3){
                _myData.xenGroup = _chooseTraitGivenArray(xenGroupsRemaining);
                xenGroupsRemaining[_myData.xenGroup] -= 1;
            }
            else if(i==4){
                _myData.command = _chooseTraitGivenArray(commandsRemaining);
                commandsRemaining[_myData.command] -= 1;
            }
            else if(i==5){
                _myData.response = _chooseTraitGivenArray(responsesRemaining);
                responsesRemaining[_myData.response] -= 1;
            }
        }

        _myData.rarity = tierOneClearanceLevelTotals[_myData.clearanceLevel]*10**10
            + (stationTotals[_myData.station] + securityTerminalTotals[_myData.securityTerminal] + xenGroupTotals[_myData.xenGroup]
              + commandTotals[_myData.command] + responseTotals[_myData.response])*10**5
            +  3000 - (whiteList[msg.sender] < 3000 ? whiteList[msg.sender] : 3000);

        tokenIdToPackedData[tokenCounter] = packDataStructure(_myData);
        _safeMint(msg.sender, tokenCounter);

        emit MultipassCreated(tokenCounter, msg.sender, tokenIdToPackedData[tokenCounter], block.timestamp);

        tokenCounter = tokenCounter + 1;

    }

    function claim(uint256 _BytesReceived, uint256 _NeoTokyoCitizenId) public payable nonReentrant {
//        require (msg.value >= mintFee); // todo -- confirm mint fee
//        require(BytesERC20.balanceOf(msg.sender) >= _BytesReceived && _BytesReceived >= requiredBytesToMint, "Insufficient Byte balance");

//        if(requiredBytesToMint > 0){
//            require(BytesERC20.transferFrom(msg.sender, address(this), _BytesReceived), "Failed to transfer Bytes");
//        }
//        require(whiteList[msg.sender]!=0, "Not whitelisted"); // todo give privileges to first 250, not lowest level

        uint256 doesOwnToken = 0;
        require(blackMetaMintsRemaining > 0, "Personell limit reached.");
        blackMetaMintsRemaining -= 1;

        for(uint256 i=0; i< NeoTokyoContract.balanceOf(msg.sender);i++){
            if(NeoTokyoContract.tokenOfOwnerByIndex(msg.sender, i) == _NeoTokyoCitizenId){
                doesOwnToken = 1;
                break;
            }
        }
        require(doesOwnToken==1, "Not Owner of this token.");
        require(tokenIdToNeoCitizenClaimedStatus[_NeoTokyoCitizenId]==0, "Citizen already Claimed");
        tokenIdToNeoCitizenClaimedStatus[_NeoTokyoCitizenId] = 1;


        _claim(_BytesReceived);

//        // returns list-- could be enums -- of positions within clearanceLevels that are available, not amount available
//        uint256[] memory availableClearanceLevels = _getAvailableClearanceLevelsGivenBytes(_BytesReceived); // references
//        require(availableClearanceLevels.length > 0, "Minting unavailable for that amount. Try less Bytes.");
//
//        uint256[] memory _availTotals = new uint256[](13);
//        for(uint256 i=0;i < availableClearanceLevels.length;i++){
//
//            _availTotals[i] = _BytesReceived==25 ? tierOneClearanceLevelTotals[availableClearanceLevels[i]] :
//                tierTwoClearanceLevelTotals[availableClearanceLevels[i]];
//        }
//
//        Data memory _myData = Data( {
//            clearanceLevel:0,
//            station:0,
//            securityTerminal:0,
//            xenGroup:0,
//            command:0,
//            response:0,
//            rarity:0
//        });
//
//        uint256 trait;
//        for(uint256 i=0;i < 6;i++){ // 7 traits. rarity and clearanceLevel calculated elsewhere
//            // todo -- decrease trait
//            if(i==0){ // clearanceLevel
//                _myData.clearanceLevel = _chooseTraitGivenArray(_availTotals); // todo
//                if(_BytesReceived==requiredBytesToMint){
//                    tierOneClearanceLevelTotals[_myData.clearanceLevel] -= 1;
//                }
//                else{
//                    tierTwoClearanceLevelTotals[_myData.clearanceLevel] -= 1;
//                }
//            }
//            if(i==1){
//                _myData.station = _chooseTraitGivenArray(stationsRemaining);
//                stationsRemaining[_myData.station] -= 1;
//            }
//            else if(i==2){
//                _myData.securityTerminal = _chooseTraitGivenArray(securityTerminalsRemaining);
//                securityTerminalsRemaining[_myData.securityTerminal] -= 1;
//            }
//            else if(i==3){
//                _myData.xenGroup = _chooseTraitGivenArray(xenGroupsRemaining);
//                xenGroupsRemaining[_myData.xenGroup] -= 1;
//            }
//            else if(i==4){
//                _myData.command = _chooseTraitGivenArray(commandsRemaining);
//                commandsRemaining[_myData.command] -= 1;
//            }
//            else if(i==5){
//                _myData.response = _chooseTraitGivenArray(responsesRemaining);
//                responsesRemaining[_myData.response] -= 1;
//            }
//        }
//
//        _myData.rarity = tierOneClearanceLevelTotals[_myData.clearanceLevel]*10**10
//            + (stationTotals[_myData.station] + securityTerminalTotals[_myData.securityTerminal] + xenGroupTotals[_myData.xenGroup]
//              + commandTotals[_myData.command] + responseTotals[_myData.response])*10**5
//            +  3000 - (whiteList[msg.sender] < 3000 ? whiteList[msg.sender] : 3000);
//
//        tokenIdToPackedData[tokenCounter] = packDataStructure(_myData);
//        _safeMint(msg.sender, tokenCounter);
//
//        emit MultipassCreated(tokenCounter, msg.sender, tokenIdToPackedData[tokenCounter], block.timestamp);
//
//        tokenCounter = tokenCounter + 1;
    }

    function setCitizenAddress(address contractAddress) public onlyOwner {
        citizenContractAddress = contractAddress;
    }

    constructor(address _BytesAddress, address _NeoTokyoAddress, string memory _backgroundImageLink) ERC721("Black Meta Multipass", "BMPASS") Ownable() {
//        bytesContractAddress = 0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95;
        bytesContractAddress = _BytesAddress;
        BytesERC20 = IERC20(_BytesAddress);
//        citizenContractAddress = 0xb668beB1Fa440F6cF2Da0399f8C28caB993Bdd65; // on ETH main net
        NeoTokyoContract = IERC721Enumerable(_NeoTokyoAddress);
        requiredBytesToMint = 25;
        backgroundImageLink = _backgroundImageLink;
    }

    // Required to receive ETH
    receive() external payable {
        emit ReceivedETH(msg.sender, msg.value, block.timestamp);
    }


    /////////////////////////////////////////////
    ///////// MetaData, Image Functions /////////
    /////////////////////////////////////////////

    function getSVGTextGivenLine(uint256 _line, uint256 _duration, uint256 _startTime, string memory _txt) internal view returns (string memory) {
        string memory ret = string(abi.encodePacked(
            "%3Cpath id='path",
            toString(_line),
            "'%3E %3Canimate attributeName='d' from='m50, ",
            toString(170 + _line*14), // todo-- this assume _line starts at 0
            " h0' to='m50, ",
            toString(170 + _line*14), // todo-- this assume _line starts at 0
            " h1100' dur='",
            toString(_duration),
            "s' begin='",
            toString(_startTime),
            "s' fill='freeze'/%3E%3C/path%3E"
        ));
        ret = string(abi.encodePacked(ret,
            "%3Ctext class='bm'%3E %3CtextPath xlink:href='%23path",
            toString(_line),
            "'%3E",
            _txt,
            "%3C/textPath%3E",
            "%3C/text%3E"
        ));
        return ret;
    }


    ////// Functions to get Citizen Data
//    function getIdentityIdOfTokenId(uint256 citizenId) public view returns (uint256) {}
//    function getVaultIdOfTokenId(uint256 citizenId) public view returns (uint256) {}
//    function getItemCacheIdOfTokenId(uint256 citizenId) public view returns (uint256) {}
//    function getLandDeedIdOfTokenId(uint256 citizenId) public view returns (uint256) {}
//    function getSpecialMessageOfTokenId(uint256 citizenId) public view returns (string memory) {}
//    function getRewardRateOfTokenId(uint256 citizenId) public view returns (uint256) {}
//    function getGenderOfTokenId(uint256 citizenId) public view returns (bool) {}

    // todo-- update toString into toString
    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");
        Data memory _myData = unpackData(_tokenId);


        string memory style = string(abi.encodePacked(
          "%3Cstyle%3E",
                "@import url('https://fonts.googleapis.com/css2?family=VT323');",
                ".bm %7B",
//                    "font-family: 'Courier New';",
                    "font-family: 'VT323', monospace;",
                    "font-size:12px;",
                    "fill: hsl(80,61%25,50%25);%7D",
                "%7D",
          "%3C/style%3E"
        ));

//fill='hsl(80,61%25,50%25)'
        ////////////
        string memory header = string(abi.encodePacked(
//            "%3Cstyle%3E .svgBody %7Bfont-family: 'Courier New';opacity:0.9; .bm %7Bfont-size:20px;fill: hsl(80,61%25,50%25);%7D %3C/style%3E",
            style,
            "%3Ctext fill='hsl(80,61%25,50%25)' class='bm' x='200' y='90'%3EA.T.H.E.N.A. 9000 OPERATING SYSTEM %3C/text%3E",
            "%3Ctext fill='hsl(80,61%25,50%25)' class='bm' x='170' y='110'%3ECOPYRIGHT 2075-2121 BLACK META CORPORATION%3C/text%3E",
            "%3Ctext fill='hsl(80,61%25,50%25)' class='bm' x='230' y='130'%3E --SECURITY TERMINAL %23--  %3C/text%3E"
        ));

        string[23] memory textLines = [
            '--Black Meta Security Scan Subsystem--',
            '=============================================',
            'AthenaOS v. 7.21 (C)2075 Black Meta Corp.(TM)  ',
            '=============================================',
            '| %3E%3E Running Security Scan... COMPLETE ', // red text after here if not verified
            '| User Log: ',
            '| %3E%3E Identity_Classified',
            string(abi.encodePacked('| %3E%3E MultipassID: ', toString(_tokenId))),
            '| Security Clearance: ',
            string(abi.encodePacked('| %3E%3E ', clearanceLevels[_myData.clearanceLevel] )), // add security clearance
            '| %3E%3E Welcome to Black Meta Research Facility. ',
            '| %3E%3E Assigning New Quarters... COMPLETE ',
            string(abi.encodePacked('| %3E%3E ', xenGroups[_myData.xenGroup] )), // Xen_1_userGroup
            '%3E| %3E%3E Granting Subroot Access... COMPLETE ',
            '%3E| %3E%3E Opening Command Subroot... COMPLETE ',
            '====================================',
            '%3EHello, there. My Name is Athena. What is your command?',
            '%3EC:%3E Athena, Set New Target Param (35.6762 N, 139.6503 E)... ACCESS_DENIED ',
            '%3E| WARNING: Unauthorized Access Security Terminal 01. ',
            '%3E| %3E%3E%3E Alerting Security Personnel... COMPLETE',
            '%3E| %3E%3E%3E Shutting Down Subroot Access... COMPLETE',
            '====================================',
            'C:%3E  '
        ];

        string memory textOverlay="";
        uint256 startTime = 0;
        uint256 duration = 5;
        uint256 flag = 0;
        for(uint256 i=0;i< textLines.length;i++){
            if(i==5 && NeoTokyoContract.balanceOf(msg.sender) == 0){
                // red lines ACCESS DENIED
                textLines[5] = 'ACCESS DENIED';
                flag = 1;
            }
             textOverlay = string(abi.encodePacked(textOverlay, getSVGTextGivenLine(i, duration, startTime, textLines[i]), " "));
            startTime += duration/2;
            if(flag==1) { break;}
        }


        string memory footer = string(abi.encodePacked(
            "%3Cpath id='pathfinal'%3E%3Canimate attributeName='d' from='m120,525 h0' to='m120,525 h1100' dur='7s' begin='", toString(startTime) , "s' fill='freeze'/%3E%3C/path%3E",
            "%3Ctext%3E%3CtextPath xlink:href='%23pathfinal' class='bm'%3ERETURN: enter | BACKSPACE : delete | F1: main menu%3C/textPath%3E%3C/text%3E"
//            "%3Cstyle%3E .svgBody %7Bfont-family: 'Courier New';opacity:0.9;background-size:cover;background-size: auto auto;background-repeat: no-repeat;background-image: url(https://gateway.pin",
//            "ata.cloud/ipfs/QmcGVfK6SW45GFCQZLHe32myGvo6MXaEUerRAWTWM3UHtu?preview=1);%7D .bm %7Bfont-size:20px;fill: hsl(80,61%25,50%25);%7D %3C/style%3E"
        ));


    //getSVGTextGivenLine(line, duration, begin)

        string memory mainImage;

        // todo -- updateable link
        mainImage = string(abi.encodePacked(
            "%3Cimage xlink:href='", backgroundImageLink ,"' width='600' height='600' /%3E"
        ));

        string memory SVG = string(abi.encodePacked(
            // Container
           "%3Csvg xmlns='http://www.w3.org/2000/svg' width='600'  xmlns:xlink='http://www.w3.org/1999/xlink' height='600'%3E %3Crect width='600' height='600' style='fill:rgb(255,255,255);stroke-width:3;stroke:rgb(0,0,0)' /%3E",

            // Main image
            mainImage,
            header,

           // text outlines
            textOverlay,
            footer,

            // Error Message
            "Unsupported.",
            "%3C/svg%3E"
            ));

        return formatTokenURI(_tokenId, svgToImageURI(SVG));
    }


    function svgToImageURI(string memory svg) public pure returns (string memory) {
        bool ENCODE = false;
        string memory baseURL = "data:image/svg+xml;base64,";

        if (!ENCODE) {
            baseURL = "data:image/svg+xml,";
            return string(abi.encodePacked(baseURL,svg));
        }

        //        string memory svgBase64Encoded = Base64.encode((string(abi.encodePacked(svg)))); // bytes?
        string memory svgBase64Encoded = Base64.encode(bytes(svg)); // bytes?
        return string(abi.encodePacked(baseURL,svgBase64Encoded));
    }


    function formatTokenURI(uint256 _tokenId, string memory imageURI) public view returns (string memory) {
        Data memory _myData = unpackData(_tokenId);
        string memory json_str = string(abi.encodePacked(
            '{"description": "The ticket into Black Meta Universe of Neo Tokyo"',
            ', "external_url": "https://blackmetamultipass.com"', // todo --actual link
            ', "image": "',
             imageURI, '"',
            ', "name": "Black Meta Multipass"',
            // attributes
            ', "attributes": [{"trait_type": "clearanceLevel", "value": "',
            clearanceLevels[_myData.clearanceLevel],   '" }'
        ));

//    enum DataProperties {clearanceLevel, station, securityTerminal, xenGroup, command, response}
        // concatenate
        json_str = string(abi.encodePacked(json_str,
            ', {"trait_type": "station", "value": "',
            stations[_myData.station],   '" }',
            ', {"trait_type": "securityTerminal", "value": "', // "display_type": "number",
            securityTerminals[_myData.securityTerminal],   '" }' // todo --consider updating this to uint256
        ));

        json_str = string(abi.encodePacked(json_str,
            ', {"trait_type": "xenGroups", "value": "', // "display_type": "number",
            xenGroups[_myData.xenGroup],   '" }',
            ', {"trait_type": "command", "value": "', // "display_type": "number",
            commands[_myData.command],   '" }'
        ));


        json_str = string(abi.encodePacked(json_str,
                ', {"trait_type": "response", "value": "', // "display_type": "number",
            responses[_myData.response],   '" }',
            ', {"trait_type": "rarity", "value": "', // "display_type": "number",
            toString(_myData.rarity),   '" }', // todo
            ', {"trait_type": "rarityRanking", "value": "', // "display_type": "number",
            toString(getRanking(_tokenId)),   '" }'
        ));

        json_str = string(abi.encodePacked(json_str,
            ']', // End Attributes
            '}'
        ));

        return string(abi.encodePacked("data:application/json;base64,", Base64.encode(bytes(json_str))));
    }


    ///////////////////////////////////
    ///////// Admin Functions /////////
    ///////////////////////////////////

    function addToWhiteList(address[] calldata _whiteListAdditions) external onlyOwner { // todo-- make value for these
//        require(msg.sender==owner());
        whiteListCount += 1;
        for(uint256 i; i < _whiteListAdditions.length; i++){
            if(whiteList[_whiteListAdditions[i]]==0){
                whiteList[_whiteListAdditions[i]] = whiteListCount; // this number gives special treatment to first x on whitelist--OG
            }
        }
    }

    function removeFromWhiteList(address[] calldata _whiteListSubtractions) external onlyOwner {
//        require(msg.sender==owner());
        for(uint256 i; i < _whiteListSubtractions.length; i++){
            if(whiteList[_whiteListSubtractions[i]]==1){
                whiteList[_whiteListSubtractions[i]] = 0;
            }
        }
    }

    function withdrawBytes( address _recipient) external onlyOwner nonReentrant {
        uint256 _BytesReleased = BytesERC20.balanceOf(address(this));
        require(BytesERC20.transfer(_recipient, BytesERC20.balanceOf(address(this))), "Bytes transfer failed.");
        emit FundsReleasedToAccount(0, _BytesReleased, _recipient, block.timestamp);
    }

    function withdrawEth( address payable _recipient) external onlyOwner nonReentrant {
        uint256 amountReleased = address(this).balance;
        (bool success, ) = _recipient.call{value : address(this).balance}("Releasing ETH.");
        require(success, "Transfer failed.");
        emit FundsReleasedToAccount(amountReleased, 0, _recipient, block.timestamp);
    }

    function setBytesAddress(address _contractAddress) external onlyOwner {
        BytesERC20 = IERC20(_contractAddress);
    }

    function setNeoTokyoAddress(address _contractAddress) external onlyOwner {
        NeoTokyoContract = IERC721Enumerable(_contractAddress);
    }

    function setBlackMetaIdentityAddress(address _contractAddress) external onlyOwner {
        BlackMetaIdentityContract = IERC721Enumerable(_contractAddress);
    }

    function setOGPrivilege(uint256 _OGPrivilege) external onlyOwner {
        require(_OGPrivilege < 2, "must be 1 or 0");
        OGPrivilege = _OGPrivilege;
    }

    function setMintFee(uint256 _mintFee) external onlyOwner {
        mintFee = _mintFee;
    }

    function setRequiredBytesToMint(uint256 _requiredBytesToMint) external onlyOwner {
        requiredBytesToMint = _requiredBytesToMint;
    }


    function setBackgroundImageLink(string memory _backgroundImageLink) external onlyOwner {
        backgroundImageLink = _backgroundImageLink;
    }

    ////////////////////////////////////
    ///////// Helper Functions /////////
    ////////////////////////////////////

    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT license
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }


}



// todo -- remove after testing

//////////////////////////
///////// NEO TOKYO //////
//////////////////////////


contract NTCitizenDeploy is ERC721Enumerable, IERC721Receiver, ReentrancyGuard, Ownable {

    uint256 constant SECONDS_IN_A_YEAR = 31536000;
    bool citizenMintActive;
    bool boughtIdentitiesActive;
    bool femaleActive;
    address citizenMintContract;
    address citizenAlternateMintContract;
    address public vaultContract;
    address public itemContract;
    address public identityContract;
    address public boughtIdentityContract;
    address public landContract;
    address public bytesContract;
    uint256 newestCitizen;
    uint256 public mintedIdentityCost = 2000 ether;
    uint256 public changeGenderCost = 25 ether;
    uint256 public changeSpecialMessageCost = 10 ether;
    uint256 creationTime;
    uint256 endDelta = 157680000;

    // Mapping for vault tokenIds that were used to creat a citizen
    mapping(uint256 => uint256) private _vaultDataByCitizenId;
    // Mapping for identity tokenIds that were used to creat a citizen
    mapping(uint256 => uint256) private _identityDataByCitizenId;
    // Mapping for item cache tokenIds that were used to creat a citizen
    mapping(uint256 => uint256) private _itemCacheDataByCitizenId;
    // Mapping for land deed tokenIds that were used to creat a citizen
    mapping(uint256 => uint256) private _landDeedDataByCitizenId;
    // Mapping for special messages uploaded when a citizen was created
    mapping(uint256 => string) private _specialMessageByCitizenId;
    // Mapping for reward by citizen
    mapping(uint256 => uint256) private _rewardRateByCitizenId;
    // Mapping for citizen creation date
    mapping(uint256 => uint256) private _citizenCreationTime;
    // Mapping for gender of a citizen
    mapping(uint256 => bool ) private _genderFemale;

    function getIdentityIdOfTokenId(uint256 citizenId) public view returns (uint256) {
        return _identityDataByCitizenId[citizenId];
    }
    function getVaultIdOfTokenId(uint256 citizenId) public view returns (uint256) {
        return _vaultDataByCitizenId[citizenId];
    }
    function getItemCacheIdOfTokenId(uint256 citizenId) public view returns (uint256) {
        return _itemCacheDataByCitizenId[citizenId];
    }
    function getLandDeedIdOfTokenId(uint256 citizenId) public view returns (uint256) {
        return _landDeedDataByCitizenId[citizenId];
    }
    function getSpecialMessageOfTokenId(uint256 citizenId) public view returns (string memory) {
        return _specialMessageByCitizenId[citizenId];
    }
    function getRewardRateOfTokenId(uint256 citizenId) public view returns (uint256) {
        return _rewardRateByCitizenId[citizenId];
    }
    function getGenderOfTokenId(uint256 citizenId) public view returns (bool) {
        return _genderFemale[citizenId];
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) public override pure returns (bytes4) {
        return this.onERC721Received.selector ^ 0x23b872dd;
    }

    function tokenURI(uint256 tokenId) override public view returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory output;
//        IMintContract dataContract;
//
//        if(_genderFemale[tokenId])
//        {
//            dataContract = IMintContract(citizenAlternateMintContract);
//        }
//        else
//        {
//            dataContract = IMintContract(citizenMintContract);
//        }

        output = "this is not real."; // dataContract.generateURI(tokenId);

        return output;
    }

    function getRewardRate(address _user) public view returns(uint256) {
        uint256 rewardRate;
        for(uint256 index = 0; index < ERC721.balanceOf(_user); index++)
        {
            rewardRate = rewardRate + _rewardRateByCitizenId[tokenOfOwnerByIndex(_user, index)];
        }
        return rewardRate;
    }

    function getRewardsRateForTokenId(uint256 tokenId) public view returns(uint256){
        require(_exists(tokenId) || tokenId == 0, "Citizen does not exist");
        return rewardRateByTokenId(tokenId);
    }

    function rewardRateByTokenId(uint256 tokenId) internal view returns(uint256){
        require(_exists(tokenId) || tokenId == 0, "Citizen does not exist");
        if(tokenId > 0)
        {
            return _rewardRateByCitizenId[tokenId] + ((block.timestamp - _citizenCreationTime[tokenId]) / SECONDS_IN_A_YEAR);
        }
        return 0;
    }

    function getCurrentOrFinalTime() public view returns(uint256) {
        if(block.timestamp < getEnd())
        {
            return block.timestamp;
        }
        else
        {
            return getEnd();
        }
    }

    //Obsolete due to rewards mapping implementation
    function reduceRewards(uint256, address) public {}

    //Obsolete due to rewards mapping implementation
    function increaseRewards(uint256, address) public {}

    function getEnd() public view returns(uint256) {
        return creationTime + endDelta;
    }

    function calculateCitizenReward(uint256 identityId, uint256 vaultId) internal view returns(uint256){
//        IMintContract dataContract = IMintContract(citizenMintContract);
//        return dataContract.calculateRewardRate(identityId, vaultId);
        return 200;
    }


    // modified to easily create citizens for testing
    function createCitizen(uint256 identityId, uint256 vaultId, uint256 itemCacheId, uint256 landDeedId, bool genderFemale, string memory specialMessage) public nonReentrant {

        _safeMint(_msgSender(), newestCitizen + 1);

        newestCitizen++;

//        ERC721 _identityContract;

//        if(identityId < 2300)
//        {
//            _identityContract = ERC721(identityContract);
//        }
//        else
//        {
//            _identityContract = ERC721(boughtIdentityContract);
//        }
//        _identityContract.transferFrom(_msgSender(), address(this), identityId);


        _vaultDataByCitizenId[newestCitizen] = 777;
        _identityDataByCitizenId[newestCitizen] = identityId;
        _itemCacheDataByCitizenId[newestCitizen] = itemCacheId;
        _landDeedDataByCitizenId[newestCitizen] = landDeedId;
        if(genderFemale)
        {
            _genderFemale[newestCitizen] = genderFemale;
        }
        if(bytes(specialMessage).length > 0)
        {
            _specialMessageByCitizenId[newestCitizen] = specialMessage;
        }
        _rewardRateByCitizenId[newestCitizen] = 777;

        _citizenCreationTime[newestCitizen] = block.timestamp;

//        IByteContract byteToken = IByteContract(bytesContract);
//        byteToken.updateRewardOnMint(_msgSender(), newestCitizen);
    }

    function disassembleCitizen(uint256 citizenId)public nonReentrant {
        require(ownerOf(citizenId) == _msgSender(), "You do not own that citizen");

//        ERC721 _identityContract;

//        if(_identityDataByCitizenId[citizenId] < 2300)
//        {
//            _identityContract = ERC721(identityContract);
//        }
//        else
//        {
//            _identityContract = ERC721(boughtIdentityContract);
//        }
//        _identityContract.transferFrom(address(this), _msgSender(), _identityDataByCitizenId[citizenId]);
//
//        if(_vaultDataByCitizenId[citizenId] > 0)
//        {
//            ERC721 _vaultContract = ERC721(vaultContract);
//            _vaultContract.transferFrom(address(this), _msgSender(), _vaultDataByCitizenId[citizenId]);
//        }
//
//        ERC721 _itemContract = ERC721(itemContract);
//        _itemContract.transferFrom(address(this), _msgSender(), _itemCacheDataByCitizenId[citizenId]);
//
//        ERC721 _landContract = ERC721(landContract);
//        _landContract.transferFrom(address(this), _msgSender(), _landDeedDataByCitizenId[citizenId]);

        _burn(citizenId);

        delete _identityDataByCitizenId[citizenId];
        delete _vaultDataByCitizenId[citizenId];
        delete _itemCacheDataByCitizenId[citizenId];
        delete _landDeedDataByCitizenId[citizenId];
        delete _genderFemale[citizenId];
        delete _specialMessageByCitizenId[citizenId];
        delete _rewardRateByCitizenId[citizenId];
    }

     function changeGender(uint256 tokenId) public nonReentrant {
//        require(femaleActive, "Females cannot be uploaded yet");
//        require(ownerOf(tokenId) == _msgSender(), "You do not own that citizen");
//
//        IByteContract iBytes = IByteContract(bytesContract);
//        iBytes.burn(_msgSender(), changeGenderCost);
        _genderFemale[tokenId] = !_genderFemale[tokenId];
     }

     function changeSpecialMessage(uint256 tokenId, string memory _message) public nonReentrant {
//        require(ownerOf(tokenId) == _msgSender(), "You do not own that citizen");
//
//        IByteContract iBytes = IByteContract(bytesContract);
//        iBytes.burn(_msgSender(), changeSpecialMessageCost);
        _specialMessageByCitizenId[tokenId] = _message;
     }

     function setChangeGenderCost(uint256 _cost) external onlyOwner {
         changeGenderCost = _cost;
     }

     function setChangeMessageCost(uint256 _cost) external onlyOwner {
         changeSpecialMessageCost = _cost;
     }

    function vaultValidated(uint256 vaultId) internal view returns (bool) {
//        ERC721Enumerable vaultEnumerable = ERC721Enumerable(vaultContract);
//        return(vaultEnumerable.ownerOf(vaultId) == _msgSender());
        return true;
    }

    function identityValidated(uint256 identityId) internal view returns (bool) {
//        ERC721Enumerable identityEnumerable;
//        if(identityId < 2300)
//        {
//            identityEnumerable = ERC721Enumerable(identityContract);
//        }
//        else
//        {
//            identityEnumerable = ERC721Enumerable(boughtIdentityContract);
//        }
//        return(identityEnumerable.ownerOf(identityId) == _msgSender());
        return true;
    }

    function itemCacheValidated(uint256 itemCacheId) internal view returns (bool) {
//        ERC721Enumerable itemCacheEnumerable = ERC721Enumerable(itemContract);
//        return(itemCacheEnumerable.ownerOf(itemCacheId) == _msgSender());
        return true;
    }

    function landDeedValidated(uint256 landDeedId) internal view returns (bool) {
//        ERC721Enumerable landDeedEnumerable = ERC721Enumerable(landContract);
//        return(landDeedEnumerable.ownerOf(landDeedId) == _msgSender());
        return true;
    }

    function setFemaleActive() public onlyOwner {
        femaleActive = !femaleActive;
    }

    function setCitizenMintActive() public onlyOwner {
        citizenMintActive = !citizenMintActive;
    }

    function setBoughtIdentitiesActive() public onlyOwner {
        boughtIdentitiesActive = !boughtIdentitiesActive;
    }

    function setIdentityAddress(address contractAddress) public onlyOwner {
        identityContract = contractAddress;
    }

    function setLandContract(address contractAddress) public onlyOwner {
        landContract = contractAddress;
    }

    function setItemContract(address contractAddress) public onlyOwner {
        itemContract = contractAddress;
    }

    function setVaultAddress(address contractAddress) public onlyOwner {
        vaultContract = contractAddress;
    }

    function setBytesAddress(address contractAddress) public onlyOwner {
        bytesContract = contractAddress;
    }

    function setCitizenMintContract(address contractAddress) public onlyOwner {
        citizenMintContract = contractAddress;
    }

    function setCitizenAlternateMintContract(address contractAddress) public onlyOwner {
        citizenAlternateMintContract = contractAddress;
    }

    function setMintedIdentityCost(uint256 _cost) public onlyOwner {
        mintedIdentityCost = _cost;
    }

    function mintIdentity() public
    {
//        require(boughtIdentitiesActive, "Identities cannot be bought yet");
//        require(address(boughtIdentityContract) != address(0), "Identity contract not set");
//        IByteContract iBytes = IByteContract(bytesContract);
//        iBytes.burn(_msgSender(), mintedIdentityCost);
//        IBoughtIdentityContract iBoughtIdentitiesContract = IBoughtIdentityContract(boughtIdentityContract);
//        iBoughtIdentitiesContract.claimIdentity(_msgSender());
    }

    function getReward() external {
//        IByteContract byteToken = IByteContract(bytesContract);
//        byteToken.updateReward(msg.sender, address(0), 0);
//		byteToken.getReward(msg.sender);
	}

	function transferFrom(address from, address to, uint256 tokenId) public override {
//		IByteContract byteToken = IByteContract(bytesContract);
//        byteToken.updateReward(from, to, tokenId);
//		ERC721.transferFrom(from, to, tokenId);
	}

	function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {
//		IByteContract byteToken = IByteContract(bytesContract);
//        byteToken.updateReward(from, to, tokenId);
//		ERC721.safeTransferFrom(from, to, tokenId, _data);
	}

    function toString(uint256 value) internal pure returns (string memory) {
    // Inspired by OraclizeAPI's implementation - MIT license
    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    constructor() ERC721("Neo Tokyo Citizen", "NTCTZN") Ownable() {
        creationTime = block.timestamp;
        bytesContract = 0x7d647b1A0dcD5525e9C6B3D14BE58f27674f8c95;
        vaultContract = 0xab0b0dD7e4EaB0F9e31a539074a03f1C1Be80879;
        itemContract = 0x0938E3F7AC6D7f674FeD551c93f363109bda3AF9;
        identityContract = 0x86357A19E5537A8Fba9A004E555713BC943a66C0;
        boughtIdentityContract = 0x835a60cc60B808e47825daa79A9Da6C9fF3a892E;
        landContract = 0x3C54b798b3aAD4F6089533aF3bdbD6ce233019bB;
        citizenMintContract = 0xf1F199C5a6B41231902B2f6E93e8edC59FaF507b;
    }
}